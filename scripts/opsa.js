// Generated by CoffeeScript 1.10.0
(function() {
  var AnomaliesAPI, OpsaAPI, createJar, generateJar, getOpsaUri, getRequestedHost, getSessionId, host, lastTime, loginOpsa, okToContinue, ongoing, password, path, port, protocol, request, requestp, scan, user;

  scan = function(obj, level) {
    var c, fields, k, lineNum, spaces;
    k = void 0;
    if (typeof level === 'undefined') {
      level = 0;
    }
    spaces = '';
    c = 0;
    while (c < level) {
      spaces += ' ';
      c++;
    }
    if (obj instanceof Object) {
      fields = '';
      lineNum = 1;
      for (k in obj) {
        k = k;
        if (obj.hasOwnProperty(k)) {
          fields += spaces + '*' + k + ':*' + scan(obj[k], level + 1) + "\n";
        }
      }
    } else {
      return spaces + "`" + obj + '`\n';
    }
    return fields + '\n';
  };

  request = require('request');

  require('request-debug')(request);

  user = "opsa";

  password = "opsa";

  ongoing = false;

  port = "8080";

  path = "opsa";

  protocol = "http";

  host = "16.60.188.94";

  lastTime = Date.now();

  getSessionId = function(res, cookieIndex) {
    var cookie, firstCookie, jSessionId;
    cookie = res.headers["set-cookie"];
    if (typeof cookie === 'undefined') {
      return;
    }
    firstCookie = cookie[cookieIndex];
    return jSessionId = firstCookie.split("=")[1].split(";")[0];
  };

  generateJar = function(jSessionId, url) {
    var cookie, jar;
    jar = request.jar();
    cookie = request.cookie('JSESSIONID=' + jSessionId);
    console.log("setting cookie: " + cookie);
    jar.setCookie(cookie, url, function(error, cookie) {});
    return jar;
  };

  createJar = function(res, url, cookieIndex) {
    var jSessionId, jar;
    if (!cookieIndex) {
      cookieIndex = 0;
    }
    jSessionId = getSessionId(res, cookieIndex);
    if (typeof jSessionId === 'undefined') {
      return;
    }
    jar = generateJar(jSessionId, url);
    return jar;
  };

  OpsaAPI = function(xsrfToken, jSessionId) {
    this.xsrfToken = xsrfToken.slice(1, -1);
    this.jSessionId = jSessionId;
  };

  AnomaliesAPI = function(xsrfToken, jSessionId, hostName, from, to) {
    OpsaAPI.call(this, xsrfToken, jSessionId);
    this.hostName = hostName;
    this.from = from;
    this.to = to;
  };

  OpsaAPI.prototype.invoke = function(callback) {
    console.log('invoking API' + this.jSessionId);
    this.invoker(callback);
  };

  AnomaliesAPI.prototype = Object.create(OpsaAPI.prototype);

  AnomaliesAPI.prototype.constructor = AnomaliesAPI;

  getOpsaUri = function () {
    return protocol + "://" + host + ":" + port + "/" + path;
  };

  AnomaliesAPI.prototype.invoker = function(callback) {
    var ONE_HOUR, anomHeaders, anomJar, anomUrl, now, oneHourAgo;
    ONE_HOUR = 60 * 60 * 1000;
    now = new Date().getTime();
    oneHourAgo = now - ONE_HOUR;
    anomUrl = getOpsaUri() + "/rest/getQueryResult?aqlQuery=%5Banomalies%5BattributeQuery(%7Bopsa_collection_anomalies%7D,+%7B%7D,+%7Bi.anomaly_id%7D)%5D()%5D+&endTime=" + now + "&granularity=0&pageIndex=1&paramsMap=%7B%22$drill_dest%22:%22AnomalyInstance%22,%22$drill_label%22:%22opsa_collection_anomalies_description%22,%22$drill_value%22:%22opsa_collection_anomalies_anomaly_id%22,%22$limit%22:%22500%22,%22$interval%22:300,%22$offset%22:0,%22$N%22:5,%22$pctile%22:10,%22$timeoffset%22:0,%22$starttimeoffset%22:0,%22$endtimeoffset%22:0,%22$timeout%22:0,%22$drill_type%22:%22%22,%22$problemtime%22:1463653196351,%22$aggregate_playback_flag%22:null%7D&queryType=generic&startTime=" + oneHourAgo + "&timeZoneOffset=-180&timeout=10&visualType=table";
    anomJar = generateJar(this.jSessionId, anomUrl);
    anomHeaders = {
      'XSRFToken': this.xsrfToken
    };
    requestp(anomUrl, anomJar, 'POST', anomHeaders).then((function(anomResponse) {
      return callback(anomResponse.body);
    }));
  };

  okToContinue = function() {
    var secondsSinceLastTime;
    secondsSinceLastTime = (Date.now() - lastTime) / 1000;
    if (secondsSinceLastTime < 30 && ongoing) {
      return false;
    } else {
      lastTime = Date.now();
      ongoing = true;
      return true;
    }
  };

  loginOpsa = function (userRes, loginCallback) {
    var invokeAPI, loginForm, opsaUri, seqUrl, xsrfUrl;
    if (!okToContinue()) {
      return;
    }
    opsaUri = getOpsaUri();
    seqUrl = getOpsaUri() + "/j_security_check";
    xsrfUrl = getOpsaUri() + "/rest/getXSRFToken";
    loginForm = {
      j_username: user,
      j_password: password
    };
    invokeAPI = function(res, apiSessionResponse) {
      var sessionId, xsrfToken;
      xsrfToken = res.body;
      sessionId = getSessionId(apiSessionResponse, 0);
      return loginCallback(xsrfToken, sessionId);
    };
    requestp(opsaUri).then((function (res) {
      var jar4SecurityRequest;
      jar4SecurityRequest = createJar(res, seqUrl, 1);
      requestp(seqUrl, jar4SecurityRequest, 'POST', {}, loginForm).then((function(res) {
        return requestp(opsaUri, jar4SecurityRequest).then((function (apiSessionResponse) {
          var jar4XSRFRequest;
          jar4XSRFRequest = createJar(apiSessionResponse, xsrfUrl);
          return requestp(xsrfUrl, jar4XSRFRequest).then((function(res) {
            return invokeAPI(res, apiSessionResponse);
          }));
        }));
      }));
    }), function(err) {
      ongoing = false;
      console.error('%s; %s', err.message, getOpsaUri());
      console.log('%j', err.res.statusCode);
    });
    return userRes.reply('Please wait');
  };

  requestp = function(url, jar, method, headers, form) {
    headers = headers || {};
    method = method || 'GET';
    jar = jar || {};
    form = form || {};
    return new Promise(function(resolve, reject) {
      var reqData;
      reqData = {
        uri: url,
        headers: headers,
        method: method
      };
      if (jar) {
        reqData.jar = jar;
      }
      if (form) {
        reqData.form = form;
      }
      request(reqData, function(err, res, body) {
        if (err) {
          return reject(err);
        } else if (res.statusCode === 200 || res.statusCode === 302 || res.statusCode === 400) {
          resolve(res, body);
        } else {
          ongoing = false;
          err = new Error('Unexpected status code: ' + res.statusCode);
          err.res = res;
          return reject(err);
        }
        resolve(res, body);
      });
    });
  };

  getRequestedHost = function (res) {
    return res.match[1].replace(/^https?\:\/\//i, "");
  };

  module.exports = function(robot) {
    return robot.respond(/display anomalies for host:(.*)/i, function (res) {
      var loginCallback;
      loginCallback = function(xsrfToken, sessionId) {
        var anomaliesAPI, apiCallback;
        anomaliesAPI = new AnomaliesAPI(xsrfToken, sessionId, 'host', 'from', 'to');
        apiCallback = function(body) {
          var colIdx, colName, colNames, colValue, collectionId, collections, columnIdx, display, obj, output, resultObjectIdx, row, rowIdx, rowStr, table, tableIdx;
          colNames = new Array();
          collections = JSON.parse(body);
          output = "";
          for (collectionId in collections) {
            for (resultObjectIdx in collections[collectionId]) {
              obj = collections[collectionId];
              for (tableIdx in obj[resultObjectIdx].processedResult) {
                table = obj[resultObjectIdx].processedResult[tableIdx];
                for (columnIdx in table.columnNames) {
                  colNames.push(table.columnNames[columnIdx].columnTitle);
                }
                for (rowIdx in table.tableDataWithDrill) {
                  row = table.tableDataWithDrill[rowIdx];
                  rowStr = "";
                  display = false;
                  for (colIdx in row) {
                    colName = colNames[colIdx];
                    colValue = row[colIdx].displayValue;
                    if (display === false && colName === "Entity" && (colValue === getRequestedHost() || colValue === "*")) {
                      display = true;
                    }
                    rowStr += "*" + colName + ":* " + colValue + "\n";
                  }
                  if (display) {
                    output += rowStr;
                  }
                }
              }
            }
          }
          res.reply('Displaying Anomalies For Host: ' + getRequestedHost(res) + "\n" + output);
          ongoing = false;
        };
        return anomaliesAPI.invoke(apiCallback);
      };
      return loginOpsa(res, loginCallback);
    });
  };

}).call(this);

//# sourceMappingURL=opsa.js.map
